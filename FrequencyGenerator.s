psect	dac_code, class=CODE
#include <xc.inc>
    
extrn	Recording, Replay
global	DAC_Setup, DAC_Int_Hi, Clear_Recording, freq_replay

psect	data
	
myTable: 
db	0x80,0x83,0x86,0x89,0x8c,0x8f,0x92,0x95
db	0x98,0x9c,0x9f,0xa2,0xa5,0xa8,0xab,0xae
db	0xb0,0xb3,0xb6,0xb9,0xbc,0xbf,0xc1,0xc4
db	0xc7,0xc9,0xcc,0xce,0xd1,0xd3,0xd5,0xd8
db	0xda,0xdc,0xde,0xe0,0xe2,0xe4,0xe6,0xe8
db	0xea,0xeb,0xed,0xef,0xf0,0xf2,0xf3,0xf4
db	0xf6,0xf7,0xf8,0xf9,0xfa,0xfb,0xfb,0xfc
db	0xfd,0xfd,0xfe,0xfe,0xfe,0xff,0xff,0xff
db	0xff,0xff,0xff,0xff,0xfe,0xfe,0xfd,0xfd
db	0xfc,0xfc,0xfb,0xfa,0xf9,0xf8,0xf7,0xf6
db	0xf5,0xf4,0xf2,0xf1,0xef,0xee,0xec,0xeb
db	0xe9,0xe7,0xe5,0xe3,0xe1,0xdf,0xdd,0xdb
db	0xd9,0xd7,0xd4,0xd2,0xcf,0xcd,0xca,0xc8
db	0xc5,0xc3,0xc0,0xbd,0xba,0xb8,0xb5,0xb2
db	0xaf,0xac,0xa9,0xa6,0xa3,0xa0,0x9d,0x9a
db	0x97,0x94,0x91,0x8e,0x8a,0x87,0x84,0x81
db	0x7e,0x7b,0x78,0x75,0x71,0x6e,0x6b,0x68
db	0x65,0x62,0x5f,0x5c,0x59,0x56,0x53,0x50
db	0x4d,0x4a,0x47,0x45,0x42,0x3f,0x3c,0x3a
db	0x37,0x35,0x32,0x30,0x2d,0x2b,0x28,0x26
db	0x24,0x22,0x20,0x1e,0x1c,0x1a,0x18,0x16
db	0x14,0x13,0x11,0x10,0xe,0xd,0xb,0xa
db	0x9,0x8,0x7,0x6,0x5,0x4,0x3,0x3
db	0x2,0x2,0x1,0x1,0x0,0x0,0x0,0x0
db	0x0,0x0,0x0,0x1,0x1,0x1,0x2,0x2
db	0x3,0x4,0x4,0x5,0x6,0x7,0x8,0x9
db	0xb,0xc,0xd,0xf,0x10,0x12,0x14,0x15
db	0x17,0x19,0x1b,0x1d,0x1f,0x21,0x23,0x25
db	0x27,0x2a,0x2c,0x2e,0x31,0x33,0x36,0x38
db	0x3b,0x3e,0x40,0x43,0x46,0x49,0x4c,0x4f
db	0x51,0x54,0x57,0x5a,0x5d,0x60,0x63,0x67
db	0x6a,0x6d,0x70,0x73,0x76,0x79,0x7c,0x80
	myTable_1   EQU 255
	align 2
	
    
psect	udata_acs
counter1: ds 1
counter2: ds 1
freq_rollover: ds 1
freq_replay: ds 1
    
    
    
psect	dac_code, class=CODE


DAC_Int_Hi:	; Outputs Square pulse (Uncomment to output sine with DAC)
	movwf	freq_rollover, A
	btfss	TMR0IF		; check that this is timer0 interrupt
	bra	Record		; Branch to Recording if timer1 interrupt    
	movlw	0xFF
	movwf	TMR0H, A	
	movff	freq_rollover, TMR0L, A	; assign to the lower 8 bits
	tstfsz	freq_rollover, A
	;bcf	LATH, 0, A	; control signal
	call	Squarewave
	;dcfsnz	counter1, A	  
	;call	Load_waveform ; Load Lookup table waveform
	;tblrd*+			; move along table
	;movff	TABLAT, LATJ, A ; move value from table to port J
	;bsf	LATH, 0, A
	bcf	TMR0IF		; clear interrupt flag
	retfie	f		; fast return from interrupt

Squarewave:
	tstfsz	LATJ, A
	decfsz	LATJ, A
	incf	LATJ, A

	return
	
Record:
	btfsc	Recording, 0, A	    ; Check Recording mode enabled
	call	Store_note
	btfsc	Replay, 0, A	    ; Check Replay mode enabled
	movff	POSTINC0, freq_replay, A    
	bcf	TMR1IF		; clear interrupt flag
	retfie	f		; fast return from interrupt
	return
	
Store_note: ;Store freq_rollover into data memory
	movlw	0x0E		
	cpfslt	FSR0H, A	; rollover when FSR0 points to bank 15
	lfsr	0, 0x200        ; Start memory storage at Bank 2, use pointer 0
	incf	LATH, A
	movff	freq_rollover, POSTINC0, A
	return
	
Clear_Recording:
	lfsr	0, 0x200
Next:				
	clrf	POSTINC0, A	    ;Clear storage
	movlw	0x0E
	cpfsgt	FSR0H, A  
	bra	Next
	movlw	0
	movwf	LATH, A
	
	return
	
DAC_Setup:
	clrf	TRISJ, A	; Set PORTD as all outputs
	clrf	LATJ, A		; Clear PORTD outputs
	clrf	TRISH, A
	clrf	LATH, A
	movlw	10000111B	; Set timer0 to 16-bit, 42.5kHz
	movwf	T0CON, A	
	bsf	TMR0IE		; Enable timer0 interrupt
	
	movlw	00110111B	; Set timer1 to 16-bit, 2MHz
	movwf	T1CON, A
	bsf	TMR1IE
	bsf	PEIE
	
	bsf	GIE		; Enable all interrupts
	
;	bcf	CFGS		; set up table
;	bsf	EEPGD
;	call	Load_waveform
	return
	
Load_waveform:	    ; For outputing from lookup table
    
	movlw	low highword(myTable)
	movwf	TBLPTRU, A
	movlw	high(myTable)
	movwf	TBLPTRH, A
	movlw	low(myTable)
	movwf	TBLPTRL, A
	movlw	myTable_1
	movwf	counter1, A
	return
	end


